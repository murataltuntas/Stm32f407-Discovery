/**
  ******************************************************************************
  * File Name          : main.c
  * Description        : Main program body
  ******************************************************************************
  *
  * COPYRIGHT(c) 2016 STMicroelectronics
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */
/* Includes ------------------------------------------------------------------*/
#include "stm32f4xx_hal.h"
#include "dma.h"
#include "usart.h"
#include "gpio.h"

/* USER CODE BEGIN Includes */
void ReadAndAddToBuffer(void);
void ReadReplyAndAddToBuffer(void);
void ConsumeAndTransmitBuffer(void);
void ConsumeReplyAndTransmitBuffer(void);
/* USER CODE END Includes */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
/* Private variables ---------------------------------------------------------*/

#define USE_DMA

#define BUFFER_SIZE 128

uint8_t callRxData;
uint8_t callBuffer[BUFFER_SIZE];
uint32_t callBufferWrite = 0;
uint32_t callBufferRead = 0;

uint8_t replyRxData;
uint8_t replyBuffer[BUFFER_SIZE];
uint32_t replyBufferWrite = 0;
uint32_t replyBufferRead = 0;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void Error_Handler(void);

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* Configure the system clock */
  SystemClock_Config();

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_USART1_UART_Init();
  MX_USART2_UART_Init();

  /* USER CODE BEGIN 2 */
#ifdef USE_DMA
	HAL_UART_Receive_DMA(&huart1, &callRxData, 1);
	HAL_UART_Receive_DMA(&huart2, &replyRxData, 1);
#else
	HAL_UART_Receive_IT(&huart1, &callRxData, 1);
	HAL_UART_Receive_IT(&huart2, &replyRxData, 1);
#endif
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
	  
	ConsumeAndTransmitBuffer();
	ConsumeReplyAndTransmitBuffer();
  
  }
  /* USER CODE END 3 */

}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

/* USER CODE BEGIN 4 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if (huart == &huart1)
	{
		ReadAndAddToBuffer();
	}
	else if (huart == &huart2)
	{
		ReadReplyAndAddToBuffer();
	}
}

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
}

void ReadAndAddToBuffer(void)
{
	if (callBufferRead == 1 && callBufferWrite == BUFFER_SIZE - 1)
	{
		// overflow
		printf("overflow");
		return;
	}
	else if (callBufferWrite + 1 == callBufferRead)
	{
		// overflow
		printf("overflow");
		return;
	}
	else if (callBufferWrite == 0)
	{
		callBufferWrite = 1;
		callBufferRead = 1;
	}
	else if (callBufferWrite == BUFFER_SIZE - 1)
	{
		callBufferWrite = 1;
	}
	else
	{
		callBufferWrite++;
	}
	
	callBuffer[callBufferWrite] = callRxData;
#ifdef USE_DMA
	HAL_UART_Receive_DMA(&huart1, &callRxData, 1);
#else
	HAL_UART_Receive_IT(&huart1, &callRxData, 1);
#endif
}

void ConsumeAndTransmitBuffer(void)
{
  static uint32_t latestConsume = 0;
  uint32_t now = HAL_GetTick();
  
  if (latestConsume != 0)
  {
	  uint32_t diff = now - latestConsume;
	  
	  if (diff <= 1)
	  {
		  return;
	  }
  }
  
  if (callBufferRead != 0)
  {
	HAL_NVIC_DisableIRQ(USART1_IRQn);
	uint8_t* txPtr = &callBuffer[callBufferRead];
#ifdef USE_DMA
	HAL_UART_Transmit_DMA(&huart2, txPtr, 1);
#else
	HAL_UART_Transmit_IT(&huart2, txPtr, 1);
#endif
	
	if (callBufferRead == callBufferWrite)
	{
	  callBufferRead = 0;
	  callBufferWrite = 0;
	}
	else if (callBufferRead == BUFFER_SIZE - 1)
	{
	  callBufferRead = 1;
	}
	else
	{
	  callBufferRead++;
	}
	
	latestConsume = now;
	
	HAL_NVIC_EnableIRQ(USART1_IRQn);
  }
}

void ReadReplyAndAddToBuffer(void)
{
	if (replyBufferRead == 1 && replyBufferWrite == BUFFER_SIZE - 1)
	{
		// overflow
		printf("overflow");
		return;
	}
	else if (replyBufferWrite + 1 == replyBufferRead)
	{
		// overflow
		printf("overflow");
		return;
	}
	else if (replyBufferWrite == 0)
	{
		replyBufferWrite = 1;
		replyBufferRead = 1;
	}
	else if (replyBufferWrite == BUFFER_SIZE - 1)
	{
		replyBufferWrite = 1;
	}
	else
	{
		replyBufferWrite++;
	}
	
	replyBuffer[replyBufferWrite] = replyRxData;
#ifdef USE_DMA
	HAL_UART_Receive_DMA(&huart2, &replyRxData, 1);
#else
	HAL_UART_Receive_IT(&huart2, &replyRxData, 1);
#endif
}

void ConsumeReplyAndTransmitBuffer(void)
{
  static uint32_t latestConsume = 0;
  uint32_t now = HAL_GetTick();
  
  if (latestConsume != 0)
  {
	  uint32_t diff = now - latestConsume;
	  
	  if (diff <= 1)
	  {
		  return;
	  }
  }
  
  if (replyBufferRead != 0)
  {
	HAL_NVIC_DisableIRQ(USART2_IRQn);
	uint8_t* txPtr = &replyBuffer[replyBufferRead];
#ifdef USE_DMA
	HAL_UART_Transmit_DMA(&huart1, txPtr, 1);
#else
	HAL_UART_Transmit_IT(&huart1, txPtr, 1);
#endif
	
	if (replyBufferRead == replyBufferWrite)
	{
	  replyBufferRead = 0;
	  replyBufferWrite = 0;
	}
	else if (replyBufferRead == BUFFER_SIZE - 1)
	{
	  replyBufferRead = 1;
	}
	else
	{
	  replyBufferRead++;
	}
	
	latestConsume = now;
	
	HAL_NVIC_EnableIRQ(USART2_IRQn);
  }
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
  }
  /* USER CODE END Error_Handler */ 
}

#ifdef USE_FULL_ASSERT

/**
   * @brief Reports the name of the source file and the source line number
   * where the assert_param error has occurred.
   * @param file: pointer to the source file name
   * @param line: assert_param error line source number
   * @retval None
   */
void assert_failed(uint8_t* file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
    ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */

}

#endif

/**
  * @}
  */ 

/**
  * @}
*/ 

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
